/**
 * This is a Next.js page component that displays a list of events fetched from a Strapi API and
 * renders them as cards with event details and a banner image.
 * @returns The Events component and an async function getStaticProps that fetches data from an API and
 * returns it as props to the Events component.
 */

import Layout from "@/components/Layout";
import React from "react";
import { Box, Card, CardMedia, Stack, Typography } from "@mui/material";
import { useUser } from "@/lib/authContext";
import { fetcher } from "@/lib/api";
import Image from "next/image";
import hero from "../../public/assets/hero.png";
import Head from "next/head";
import { fetchAPI } from "../api";
import { useRouter } from "next/navigation";
import tektonik from "../../public/assets/tektonik.svg";

const Events = ({ events }) => {
  const word = "Evenements";
  const firstPart = word.slice(0, Math.floor(word.length / 2));
  const secondPart = word.slice(Math.floor(word.length / 2));
  const router = useRouter();

  const { user, loading } = useUser();
  return (
    <>
      <Head>
        <title>Evenements | Soukticket üéü</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logodark.png" />
      </Head>

      <Layout user={user}>
        <div className="flex flex-col h-full events items-center justify-center ">
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              flexDirection: "column",
              alignSelf: "center",
              pt: 20,
            }}
          >
            <Box sx={{ display: "flex", justifyContent: "space-between" }}>
              <div className="px-8 md:px-0 ">
                <Typography className="font-monument tracking-widest font-ultrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-300 to-blue-500 uppercase text-4xl md:text-6xl lg:text-7xl 2xl:text-8xl ">
                  {firstPart}-
                </Typography>
                <Stack
                  flexDirection={{ md: "row", xs: "column-reverse" }}
                  gap={2}
                  alignItems="flex-end"
                >
                  <div className=" md:px-0 w-full lg:w-[25vw] md:w-[50vw]">
                    <Typography
                      variant="body1"
                      className="text-lightGray w-full sm:w-11/12 md:w-full xl:w-10/12"
                    >
                      Envie de d√©couvrir de nouveaux paysages, de vous mettre au
                      d√©fi et de faire de l&apos;exercice en plein air ? Ne
                      manquez pas nos √©v√©nements de randonn√©e et de plein air
                      pour une exp√©rience inoubliable !
                    </Typography>
                  </div>
                  <Typography className="font-monument tracking-widest font-ultrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-300 uppercase text-4xl md:text-6xl  lg:text-7xl 2xl:text-8xl">
                    {secondPart}
                  </Typography>
                </Stack>
              </div>
              <Stack className="hidden md:block">
                <Image
                  src={tektonik}
                  alt="Tektonik Logo"
                  className=" self-start "
                />
                <Typography className="-rotate-90 text-start text-3xl font-monument ">
                  {new Date().getFullYear()}
                </Typography>
              </Stack>
            </Box>
          </Box>
          <Box className=" py-24 md:px-8 lg:pr-12 xl:w-[70%] grid xs:grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4  gap-8 overflow-hidden justify-items-center">
            {events?.map((event) => (
              <Card
                elevation={0}
                className="bg-transparent cursor-pointer flex flex-col items-start w-fit max-h-fit "
                key={event.id}
              >
                {event.attributes.eventBanner.data !== null ? (
                  <CardMedia
                    className="brightness-90 hover:brightness-100 object-cover  pb-4 transition-transform hover:scale-105 duration-500 ease-in-out"
                    component="img"
                    sx={{
                      width: { md: 300, xs: 200 },
                      height: { md: 350, xs: 250 },
                    }}
                    onClick={() => router.push(`/events/${event.id}`)}
                    alt={event.attributes.eventName}
                    image={event.attributes.eventBanner?.data?.attributes.url}
                  />
                ) : (
                  <Image src={hero} width={250} height={200} />
                )}
                <Typography
                  variant="body1"
                  className="font-extrabold text-lightGray capitalize"
                >
                  {event.attributes.eventName}
                </Typography>
                <Typography
                  variant="body1"
                  className="font-extrabold text-platinum capitalize text-ellipsis w-52 md:w-full text-xs lg:text-base"
                >
                  {event.attributes.location}
                </Typography>
                <Typography
                  variant="body1"
                  className="font-extrabold text-red-400"
                >
                  {new Date(event.attributes.startDate).toLocaleDateString(
                    "en-fr",
                    {
                      weekday: "long",
                      day: "numeric",
                      month: "short",
                    }
                  )}{" "}
                  {"  "}
                </Typography>
              </Card>
            ))}
          </Box>
        </div>
      </Layout>
    </>
  );
};

export default Events;

export async function getStaticProps() {
  const dataResponse = await fetcher(
    `${process.env.NEXT_PUBLIC_STRAPI_URL}/events?populate=*`
  );
  return {
    props: {
      events: dataResponse.data,
    },
  };
}
